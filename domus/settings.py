"""
Django settings for domus project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
from pathlib import Path
import dj_database_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-^4@@&s7jy&%9rl-_6$=qgg-4os8%_i$-se)_)isxo1$t@wi*u9'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

# CSRF Settings - Add trusted origins for your Railway deployment
CSRF_TRUSTED_ORIGINS = [
    'https://domus-v2-production.up.railway.app',
    'http://localhost:8000',
    'http://127.0.0.1:8000',
]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'listings',
    'users',
    'channels',
    'chat',
    'storages',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
]

ROOT_URLCONF = 'domus.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'chat.context_processors.current_user_id',
            ],
        },
    },
]

WSGI_APPLICATION = 'domus.wsgi.application'
ASGI_APPLICATION = 'domus.asgi.application'

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases
if 'DATABASE_URL' in os.environ:
    # Use PostgreSQL (Railway or local with DATABASE_URL set)
    DATABASES = {
        'default': dj_database_url.config(
            default=os.environ.get('DATABASE_URL'),
            conn_max_age=600,
            conn_health_checks=True,
        )
    }
else:
    # Use SQLite for local development
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }

USE_GCS = os.environ.get('USE_GCS', 'False').lower() == 'true'

if USE_GCS:
    # Production: Use Google Cloud Storage
    DEFAULT_FILE_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'
    
    # GCS Settings
    GS_BUCKET_NAME = os.environ.get('domus-storage-bucket')
    GS_PROJECT_ID = os.environ.get('domus-461822')
    
    if all([
        os.environ.get('GS_PRIVATE_KEY'),
        os.environ.get('GS_CLIENT_EMAIL'),
        os.environ.get('GS_PRIVATE_KEY_ID')
    ]):
        from google.oauth2 import service_account
        credentials_info = {
            "type": "service_account",
            "project_id": GS_PROJECT_ID,
            "private_key_id": os.environ.get('GS_PRIVATE_KEY_ID'),
            "private_key": os.environ.get('GS_PRIVATE_KEY').replace('\\n', '\n'),
            "client_email": os.environ.get('GS_CLIENT_EMAIL'),
            "client_id": os.environ.get('GS_CLIENT_ID', ''),
            "auth_uri": "https://accounts.google.com/o/oauth2/auth",
            "token_uri": "https://oauth2.googleapis.com/token",
            "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
            "client_x509_cert_url": f"https://www.googleapis.com/robot/v1/metadata/x509/{os.environ.get('GS_CLIENT_EMAIL')}"
        }
        GS_CREDENTIALS = service_account.Credentials.from_service_account_info(credentials_info)
    
    # Option 2: Use full JSON from environment variable (if it fits)
    elif os.environ.get('GS_CREDENTIALS_JSON'):
        import json
        from google.oauth2 import service_account
        credentials_info = json.loads(os.environ.get('GS_CREDENTIALS_JSON'))
        GS_CREDENTIALS = service_account.Credentials.from_service_account_info(credentials_info)
    
    # GCS Configuration
    GS_DEFAULT_ACL = 'publicRead'  # Makes files publicly accessible
    GS_FILE_OVERWRITE = False  # Don't overwrite files with same name
    GS_MAX_MEMORY_SIZE = 1024 * 1024 * 5  # 5MB
    GS_LOCATION = ''  # Root of bucket - we'll handle subfolders in upload_to
    
    # Media URL will be served from GCS
    MEDIA_URL = f'https://storage.googleapis.com/{GS_BUCKET_NAME}/'
    
    # Define folder paths for GCS (used in models)
    PROPERTY_IMAGES_FOLDER = 'property_images'
    PROFILE_PICTURES_FOLDER = 'profile_pictures'
    
    print(f"Using Google Cloud Storage - Bucket: {GS_BUCKET_NAME}")
    
else:
    # Local development or Railway volume fallback
    if os.path.exists('/var/lib/containers/railwayapp'):
        # Production settings for Railway - use the volume mount
        MEDIA_ROOT = '/mnt/storage/images'
        MEDIA_URL = '/media/'
        print(f"Railway detected - MEDIA_ROOT set to: {MEDIA_ROOT}")
    else:
        # Local development settings
        MEDIA_ROOT = BASE_DIR / 'media'
        MEDIA_URL = '/media/'
        print(f"Local development - MEDIA_ROOT set to: {MEDIA_ROOT}")
    
    # Create directories for local/volume storage
    if 'MEDIA_ROOT' in locals():
        PROPERTY_IMAGES_DIR = os.path.join(MEDIA_ROOT, 'property_images')
        PROFILE_PICTURES_DIR = os.path.join(MEDIA_ROOT, 'profile_pictures')
        
        # Define folder paths (used in models)
        PROPERTY_IMAGES_FOLDER = 'property_images'
        PROFILE_PICTURES_FOLDER = 'profile_pictures'
        
        os.makedirs(PROPERTY_IMAGES_DIR, exist_ok=True)
        os.makedirs(PROFILE_PICTURES_DIR, exist_ok=True)

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = [
    BASE_DIR / "static",
]

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Media files (uploads)
# Change MEDIA_ROOT to point to the volume mount point

# Optional: Configure static files to be served from Railway Volume
# If you want to serve static files from the volume too (adjust if necessary)
STATIC_URL = '/static/'

PROPERTY_IMAGES_DIR = os.path.join(MEDIA_ROOT, 'property_images')
PROFILE_PICTURES_DIR = os.path.join(MEDIA_ROOT, 'profile_pictures')

os.makedirs(PROPERTY_IMAGES_DIR, exist_ok=True)
os.makedirs(PROFILE_PICTURES_DIR, exist_ok=True)

AUTH_USER_MODEL = 'users.CustomUser'

LOGOUT_REDIRECT_URL = ''

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            'hosts': [('127.0.0.1', 6379)],
        },
    },
}


CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels.layers.InMemoryChannelLayer',
    },
}

PORT = os.environ.get('PORT', 8000)